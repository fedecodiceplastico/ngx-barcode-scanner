import { Injectable } from '@angular/core';
import Quagga from '@ericblade/quagga2';
import { from, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class NgxBarcodeScannerService {
    defaultConfig() {
        return {
            inputStream: {
                name: 'Live',
                type: 'LiveStream',
            },
            locator: {
                patchSize: 'medium',
                halfSample: false,
            },
            locate: true,
            numOfWorkers: 8,
            frequency: 10,
        };
    }
    isScanMatch(scanResult, errorThresholdPercentage) {
        const avgErrors = this.meanBy(scanResult.codeResult.decodedCodes, 'error');
        return !!avgErrors && avgErrors < errorThresholdPercentage;
    }
    start(config, errorThresholdPercentage) {
        if (typeof this.scanResult === 'undefined') {
            this.scanResult = new Subject();
        }
        Quagga.onProcessed((scanResult) => {
            this.onProcessed(scanResult);
        });
        Quagga.onDetected((result) => {
            const barcode = result.codeResult.code;
            if (this.isScanMatch(result, errorThresholdPercentage)) {
                this.scanResult?.next(barcode + '');
            }
        });
        Quagga.init(config, async (error) => {
            if (error) {
                this.scanResult?.error(error);
                await this.stop();
            }
            else {
                Quagga.start();
            }
        });
        return this.scanResult;
    }
    stop() {
        if (typeof this.scanResult !== 'undefined') {
            this.scanResult?.unsubscribe();
            this.scanResult = undefined;
        }
        return from(Quagga.stop());
    }
    /* eslint-disable */
    meanBy(arr, property) {
        if (!arr) {
            return undefined;
        }
        return arr.reduce((acc, item) => (property in item ? acc + item[property] : acc), 0) / arr.length;
    }
    onProcessed(result) {
        const drawingCtx = Quagga.canvas.ctx.overlay;
        const drawingCanvas = Quagga.canvas.dom.overlay;
        if (result) {
            if (result.boxes) {
                const canvasWidth = drawingCanvas.getAttribute('width') ?? '0';
                const canvasHeight = drawingCanvas.getAttribute('height') ?? '0';
                const width = parseInt(canvasWidth, 10);
                const height = parseInt(canvasHeight, 10);
                drawingCtx.clearRect(0, 0, width, height);
                result.boxes
                    .filter((box) => box !== result.box)
                    .forEach((box) => {
                    Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: 'green', lineWidth: 2 });
                });
            }
            if (result.box) {
                Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: '#00F', lineWidth: 2 });
            }
            if (result.codeResult && result.codeResult.code) {
                Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxBarcodeScannerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxBarcodeScannerService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxBarcodeScannerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,